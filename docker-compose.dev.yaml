services:
  frontend-dev:
    container_name: weather.frontend.dev
    build:
      context: frontend
      dockerfile: Dockerfile.dev
    env_file:
      - .env.dev
    ports:
      - ${CLIENT_PORT}:4200
    volumes:
      - ./frontend:/usr/src/app
      - /usr/src/app/node_modules
    networks:
      - angular-net

  weather-app-dev:
    container_name: weather.weather-app.dev
    build:
      context: backend
      dockerfile: Dockerfile.weather-app.dev
    env_file:
      - .env.dev
    environment:
      - CHOKIDAR_USEPOLLING=true
      - WATCHPACK_POLLING=true
    ports:
      - ${WEATHER_APP_PORT}:8000
    depends_on:
      rabbitmq-dev:
        condition: service_healthy
      database-dev:
        condition: service_healthy
      redis-dev:
        condition: service_healthy
    volumes:
      - ./backend:/usr/src/app
      - /usr/src/app/node_modules
    restart: unless-stopped
    networks:
      - angular-net
      - pg-network
      - metrics
      - rabbitmq-net
    command: sh -c "npm run migrate:weather-app && npm run start:dev:weather-app"

  notifications-dev:
    container_name: weather.notifications.dev
    build:
      context: backend
      dockerfile: Dockerfile.notifications.dev
    env_file:
      - .env.dev
    environment:
      - CHOKIDAR_USEPOLLING=true
      - WATCHPACK_POLLING=true
    ports:
      - ${NOTIFICATIONS_PORT}:8001
    depends_on:
      rabbitmq-dev:
        condition: service_healthy
    volumes:
      - ./backend:/usr/src/app
      - /usr/src/app/node_modules
    restart: unless-stopped
    networks:
      - angular-net
      - metrics
      - rabbitmq-net

  rabbitmq-dev:
    image: rabbitmq:4.0-management
    container_name: weather.rabbitmq.dev
    ports:
      - ${RABBITMQ_PORT}:5672
      - "15672:15672"
    env_file:
      - .env
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD}
    volumes:
      - ./data-dev/rabbitmq:/var/lib/rabbitmq
    networks:
      - rabbitmq-net
    healthcheck:
      test: [ "CMD", "rabbitmq-diagnostics", "ping" ]
      interval: 60s
      timeout: 5s
      retries: 3
      start_period: 5s

  database-dev:
    container_name: weather.postgres.dev
    image: postgres:16.4-alpine
    env_file:
      - .env.dev
    ports:
      - ${POSTGRES_PORT}:5432
    volumes:
      - ./data-dev/postgres:/var/lib/postgresql/data
    networks:
      - pg-network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER}" ]
      interval: 10s
      timeout: 5s
      retries: 5

  pgadmin-dev:
    container_name: weather.pgadmin.dev
    image: dpage/pgadmin4
    env_file:
      - .env.dev
    ports:
      - ${PGADMIN_DEFAULT_PORT}:80
    depends_on:
      database-dev:
        condition: service_healthy
    networks:
      - pg-network

  redis-dev:
    container_name: weather.redis.dev
    image: redis:latest
    env_file:
      - .env.dev
    ports:
      - ${REDIS_PORT}:6379
    volumes:
      - ./data-dev/redis:/data
    networks:
      - pg-network
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]

  prometheus-dev:
    container_name: weather.prometheus.dev
    image: prom/prometheus:latest
    volumes:
      - ./config/prometheus/prometheus.dev.yaml:/etc/prometheus/prometheus.yml
      - ./data-dev/prometheus:/prometheus
    ports:
      - ${PROMETHEUS_PORT}:9090
    depends_on:
      - weather-app-dev
      - notifications-dev
    networks:
      - metrics

  loki-dev:
    container_name: weather.loki.dev
    image: grafana/loki:latest
    ports:
      - ${LOKI_PORT}:3100
    volumes:
      - ./data-dev/loki:/loki
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - metrics

  grafana-dev:
    container_name: weather.grafana.dev
    image: grafana/grafana:latest
    ports:
      - ${GRAFANA_PORT}:3000
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER}
    volumes:
      - ./data-dev/grafana:/var/lib/grafana
      - ./config/grafana/provisioning:/etc/grafana/provisioning
    command:
      - sh
      - -c
      - |
        cp /etc/grafana/provisioning/datasources/datasource.dev.yaml /etc/grafana/provisioning/datasources/datasources.yaml
        /run.sh
    depends_on:
      - prometheus-dev
      - loki-dev
    networks:
      - metrics

networks:
  pg-network:
    driver: bridge
  angular-net:
    driver: bridge
  metrics:
    driver: bridge
  rabbitmq-net:
    driver: bridge