services:
  database-test:
    container_name: weather.postgres.test
    image: postgres:16.4-alpine
    env_file:
      - .env.test
    ports:
      - ${POSTGRES_PORT}:5432
    volumes:
      - ./data-test/postgres:/var/lib/postgresql/data
    networks:
      - test-network

  redis-test:
    container_name: weather.redis.test
    image: redis:latest
    env_file:
      - .env.test
    ports:
      - ${REDIS_PORT}:6379
    volumes:
      - ./data-test/redis:/data
    networks:
      - test-network

  rabbitmq-test:
    container_name: weather.rabbitmq.test
    image: rabbitmq:4.0-management
    env_file:
      - .env.test
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBIT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBIT_PASSWORD}
    ports:
      - ${RABBIT_PORT}:5672
      - "15672:15672"
    volumes:
      - ./data-test/rabbitmq:/var/lib/rabbitmq
    networks:
      - test-network

  test-unit-frontend:
    container_name: weather.frontend.test
    build:
      context: frontend
      dockerfile: Dockerfile.test
    env_file:
      - .env.test
    volumes:
      - ./frontend:/usr/src/app
      - /usr/src/app/node_modules
    networks:
      - test-network
    command: npm run test:unit

  test-unit-weather-app:
    container_name: weather.weather-app.test-unit
    build:
      context: backend
      dockerfile: ./apps/weather-app/Dockerfile.weather-app.test
    env_file:
      - .env.test
    volumes:
      - ./backend:/usr/src/app
      - /usr/src/app/node_modules
    depends_on:
      - rabbitmq-test
      - database-test
      - redis-test
    networks:
      - test-network
    command: npm run test:unit:weather-app

  test-architecture-weather-app:
    container_name: weather.backend.test-architecture
    build:
      context: backend
      dockerfile: ./apps/weather-app/Dockerfile.weather-app.test
    env_file:
      - .env.test
    volumes:
      - ./backend:/usr/src/app
      - /usr/src/app/node_modules
    depends_on:
      - rabbitmq-test
      - database-test
      - redis-test
    networks:
      - test-network
    command: npm run test:architecture:weather-app

  test-integration-weather-app:
    container_name: weather.weather-app.test-integration
    build:
      context: backend
      dockerfile: backend/apps/weather-app/Dockerfile.weather-app.test
    env_file:
      - .env.test
    volumes:
      - ./backend:/usr/src/app
      - /usr/src/app/node_modules
    depends_on:
      - rabbitmq-test
      - database-test
      - redis-test
    networks:
      - test-network
    command: sh -c "npm run migrate:weather-app && npm run test:integration:weather-app"

  test-unit-notifications:
    container_name: weather.notifications.test-unit
    build:
      context: backend
      dockerfile: ./apps/notifications/Dockerfile.notifications.test
    env_file:
      - .env.test
    volumes:
      - ./backend:/usr/src/app
      - /usr/src/app/node_modules
    depends_on:
      - rabbitmq-test
    networks:
      - test-network
    command: npm run test:unit:notifications

  test-architecture-notifications:
    container_name: weather.notifications.test-architecture
    build:
      context: backend
      dockerfile: ./apps/notifications/Dockerfile.notifications.test
    env_file:
      - .env.test
    volumes:
      - ./backend:/usr/src/app
      - /usr/src/app/node_modules
    depends_on:
      - rabbitmq-test
    networks:
      - test-network
    command: npm run test:architecture:notifications

  test-integration-notifications:
    container_name: weather.notifications.test-integration
    build:
      context: backend
      dockerfile: ./apps/notifications/Dockerfile.notifications.test
    env_file:
      - .env.test
    volumes:
      - ./backend:/usr/src/app
      - /usr/src/app/node_modules
    depends_on:
      - rabbitmq-test
    networks:
      - test-network
    command: npm run test:integration:notifications

networks:
  test-network:
    driver: bridge
