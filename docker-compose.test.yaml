services:
  database-test:
    container_name: weather.postgres.test
    image: postgres:16.4-alpine
    env_file:
      - .env.test
    ports:
      - ${POSTGRES_PORT}:5432
    volumes:
      - ./data-test/postgres:/var/lib/postgresql/data
    networks:
      - test-network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER}" ]
      interval: 10s
      timeout: 5s
      retries: 5

  redis-test:
    container_name: weather.redis.test
    image: redis:latest
    env_file:
      - .env.test
    ports:
      - ${REDIS_PORT}:6379
    volumes:
      - ./data-test/redis:/data
    networks:
      - test-network
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]

  test-unit-frontend:
    container_name: weather.frontend.test
    build:
      context: frontend
      dockerfile: Dockerfile.test
    env_file:
      - .env.test
    volumes:
      - ./frontend:/usr/src/app
      - /usr/src/app/node_modules
    networks:
      - test-network
    command: npm run test:unit

  test-unit-backend:
    container_name: weather.backend.test-unit
    build:
      context: backend
      dockerfile: Dockerfile.test
    env_file:
      - .env.test
    volumes:
      - ./backend:/usr/src/app
      - /usr/src/app/node_modules
    depends_on:
      - database-test
      - redis-test
    networks:
      - test-network
    command: npm run test:unit

  test-integration-backend:
    container_name: weather.backend.test-integration
    build:
      context: backend
      dockerfile: Dockerfile.test
    env_file:
      - .env.test
    volumes:
      - ./backend:/usr/src/app
      - ./backend/src/mail/templates:/usr/src/app/mail/templates
      - /usr/src/app/node_modules
    depends_on:
      database-test:
        condition: service_healthy
      redis-test:
        condition: service_healthy
    networks:
      - test-network
    command: npm run test:integration

networks:
  test-network:
    driver: bridge
